#!/usr/bin/python3
""" This test module is the unittest for file_storage """
import unittest
import os
import json
from datetime import datetime
from uuid import uuid4
from models.base_model import BaseModel
from models.engine.file_storage import FileStorage


class TestFileStorage(unittest.TestCase):
    def setUp(self):
        self.storage = FileStorage()
        self.base_model = BaseModel(name="My_First_Model", my_number=89)
        self.base_model.id = str(uuid4())

    def test_save_and_reload(self):
        """ Save the BaseModel instance and check if it's in the objects dictionary """
        self.storage.new(self.base_model)
        self.storage.save()
        self.assertTrue(f"BaseModel.{self.base_model.id}" in self.storage.all())
        """ Reload objects and check if the instance is still there """
        self.storage.reload()
        self.assertTrue(f"BaseModel.{self.base_model.id}" in self.storage.all())

    def tearDown(self):
        """ Clean up and remove the JSON file """
        self.storage._FileStorage__objects = {}
        try:
            os.remove("file.json")
        except FileNotFoundError:
            pass

    def test_empty_json_file(self):
        """ Test deserialization from an empty JSON file """
        self.storage.reload()
        self.assertEqual(len(self.storage.all()), 0)

    def test_corrupted_json_file(self):
        """ Test deserialization from a corrupted JSON file """
        with open("file.json", "w") as file:
            file.write("Not a valid JSON")
        self.storage.reload()
        self.assertEqual(len(self.storage.all()), 0)

    def test_multiple_objects(self):
        """ Test serialization and deserialization of multiple objects """
        obj1 = BaseModel(name="Object1")
        obj1.id = str(uuid4())
        obj2 = BaseModel(name="Object2")
        obj2.id = str(uuid4())
        self.storage.new(obj1)
        self.storage.new(obj2)
        self.storage.save()
        self.storage.reload()
        self.assertTrue(f"BaseModel.{obj1.id}" in self.storage.all())
        self.assertTrue(f"BaseModel.{obj2.id}" in self.storage.all())

    def test_special_characters(self):
        """ Test saving and loading objects with special characters """
        obj = BaseModel(name="Special@Object", my_number=123)
        obj.id = str(uuid4())
        self.storage.new(obj)
        self.storage.save()
        self.storage.reload()
        self.assertTrue(f"BaseModel.{obj.id}" in self.storage.all())

    def test_data_types(self):
        """ Test serialization and deserialization with different data types """
        obj = BaseModel(name="DataTypesObject", my_dict={"key": "value"}, my_list=[1, 2, 3])
        """ set id attribute """
        obj.id = 'test_id'
        obj.created_at = datetime.now()
        obj.updated_at = datetime.now()
        self.storage.new(obj)
        self.storage.save()
        self.storage.reload()
        self.assertTrue(f"BaseModel.{obj.id}" in self.storage.all())



if __name__ == '__main__':
    unittest.main()
